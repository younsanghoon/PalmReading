# Express 정적 파일 제공 및 SPA 라우팅 충돌 분석

## 문제 개요
PalmReading 프로젝트에서 AI 모델 파일(`model_1752161703239.json`, `weights_1752161703239.bin` 등)을 로드할 때 오류가 발생했습니다. 이전에 정적 파일 제공 설정을 추가했음에도 불구하고 여전히 문제가 지속되었습니다. 로그 분석 결과, 정적 파일 요청이 SPA 라우트로 잘못 처리되어 HTML 페이지가 반환되고 있었습니다.

## 원인 분석

### 1. Express 미들웨어 실행 순서 문제
Express에서 미들웨어는 등록된 순서대로 실행됩니다. 기존 코드에서는 정적 파일 제공 미들웨어가 SPA 라우트 처리 미들웨어보다 늦게 실행되도록 설정되어 있었습니다.

```typescript
// 잘못된 순서
app.use(vite.middlewares);
app.use('/attached_assets', express.static(attachedAssetsPath));
app.use(SPA_ROUTES, async (req, res, next) => { ... });
```

이로 인해 `/attached_assets/` 경로로 들어오는 요청이 Vite 미들웨어나 SPA 라우트 처리 미들웨어에 의해 먼저 처리되어 HTML 페이지가 반환되었습니다.

### 2. SPA 라우트 처리 로직에서 정적 파일 경로 구분 부재
SPA 라우트 처리 로직에서 정적 파일 경로를 구분하는 조건이 없어, 모든 요청이 SPA 라우트로 처리되었습니다.

```typescript
// 조건 없이 모든 요청을 SPA 라우트로 처리
app.use(SPA_ROUTES, async (req, res, next) => {
  const url = req.originalUrl;
  log(`Handling SPA route: ${url}`, "spa-router");
  // ...
});
```

### 3. Content-Type 헤더 설정 문제
정적 파일을 제공할 때 적절한 Content-Type 헤더가 설정되지 않아, 브라우저가 파일을 올바르게 해석하지 못했습니다.

## 해결 방법

### 1. 미들웨어 순서 변경
정적 파일 제공 미들웨어를 SPA 라우트 처리 미들웨어보다 먼저 실행되도록 순서를 변경했습니다.

```typescript
// 올바른 순서
// 디버깅 미들웨어
app.use((req, res, next) => { ... });

// 정적 파일 제공 미들웨어
app.use('/attached_assets', (req, res, next) => { ... });

// Vite 미들웨어
app.use(vite.middlewares);

// SPA 라우트 처리 미들웨어
app.use(SPA_ROUTES, async (req, res, next) => { ... });
```

### 2. 정적 파일 경로 구분 조건 추가
SPA 라우트 처리 로직과 catch-all 라우트에서 정적 파일 경로를 구분하는 조건을 추가했습니다.

```typescript
app.use(SPA_ROUTES, async (req, res, next) => {
  const url = req.originalUrl;
  
  // attached_assets 경로는 정적 파일로 처리
  if (url.includes('/attached_assets/')) {
    log(`Skipping SPA handling for static asset: ${url}`, "spa-router");
    return next();
  }
  
  log(`Handling SPA route: ${url}`, "spa-router");
  // ...
});
```

### 3. Content-Type 헤더 설정 추가
정적 파일을 제공할 때 파일 확장자에 따라 적절한 Content-Type 헤더를 설정했습니다.

```typescript
app.use('/attached_assets', express.static(attachedAssetsPath, {
  setHeaders: (res, filePath) => {
    // JSON 파일의 경우 적절한 Content-Type 설정
    if (filePath.endsWith('.json')) {
      res.setHeader('Content-Type', 'application/json');
    }
    // bin 파일의 경우 적절한 Content-Type 설정
    else if (filePath.endsWith('.bin')) {
      res.setHeader('Content-Type', 'application/octet-stream');
    }
  }
}));
```

## Express 미들웨어 실행 순서의 중요성

Express에서 미들웨어 실행 순서는 매우 중요합니다. 요청이 들어오면 등록된 순서대로 미들웨어가 실행되며, 어떤 미들웨어에서 `res.send()`, `res.end()` 등을 호출하면 응답이 완료되고 이후 미들웨어는 실행되지 않습니다.

### 일반적인 미들웨어 순서 권장사항:

1. **로깅, 보안 미들웨어**: 모든 요청에 대한 로깅, CORS, 보안 검사 등
2. **본문 파싱 미들웨어**: `express.json()`, `express.urlencoded()` 등
3. **정적 파일 제공 미들웨어**: `express.static()`
4. **라우트 핸들러**: 특정 경로에 대한 처리 로직
5. **오류 처리 미들웨어**: 오류 발생 시 처리 로직
6. **404 핸들러**: 어떤 라우트에도 매칭되지 않는 요청 처리

이 순서를 따르지 않으면 예상치 못한 동작이 발생할 수 있습니다. 특히 정적 파일 제공과 SPA 라우팅이 함께 사용될 때는 더욱 주의해야 합니다.

## 테스트 결과

수정 후 `curl` 명령어로 모델 파일 요청을 테스트한 결과, 적절한 Content-Type 헤더와 함께 파일이 올바르게 제공되는 것을 확인했습니다.

### JSON 파일 요청 결과:
```
HTTP/1.1 200 OK
X-Powered-By: Express
Vary: Origin
Accept-Ranges: bytes
Cache-Control: public, max-age=0
Last-Modified: Thu, 10 Jul 2025 15:40:24 GMT
ETag: W/"166a8-197f4feba40"
Content-Type: application/json; charset=UTF-8
Content-Length: 91816
```

### bin 파일 요청 결과:
```
HTTP/1.1 200 OK
X-Powered-By: Express
Vary: Origin
Accept-Ranges: bytes
Cache-Control: public, max-age=0
Last-Modified: Thu, 10 Jul 2025 15:40:26 GMT
ETag: W/"20e470-197f4fec210"
Content-Type: application/octet-stream
Content-Length: 2155632
```

## 교훈 및 모범 사례

1. **미들웨어 순서 주의**: Express에서 미들웨어 순서는 매우 중요하며, 특히 정적 파일 제공과 라우팅 관련 미들웨어의 순서에 주의해야 합니다.

2. **경로 충돌 방지**: SPA 라우팅과 정적 파일 경로가 충돌할 가능성이 있는 경우, 명시적으로 경로를 구분하는 조건을 추가해야 합니다.

3. **적절한 Content-Type 설정**: 정적 파일을 제공할 때는 파일 유형에 맞는 Content-Type 헤더를 설정해야 브라우저가 파일을 올바르게 해석할 수 있습니다.

4. **로깅 활용**: 요청 처리 과정에서 상세한 로깅을 추가하면 문제 진단에 큰 도움이 됩니다.

## 향후 개선 사항

1. **정적 파일 캐싱 전략**: 모델 파일과 같은 큰 정적 파일에 대해 효율적인 캐싱 전략을 구현하여 성능을 개선할 수 있습니다.

2. **서비스 워커 활용**: PWA 기능을 강화하기 위해 서비스 워커를 활용하여 모델 파일을 캐싱하고 오프라인에서도 사용할 수 있도록 할 수 있습니다.

3. **모델 파일 최적화**: 모델 파일 크기를 줄이거나 청크 단위로 로드하는 방식을 검토하여 초기 로딩 시간을 단축할 수 있습니다.

4. **UI 피드백 개선**: 모델 파일 로드 상태에 대한 더 명확한 UI 피드백을 제공하여 사용자 경험을 개선할 수 있습니다. 
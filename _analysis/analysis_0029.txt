# 프로젝트 분석: GitHub Pages 사용자 사이트와 프로젝트 사이트 구분

## GitHub Pages 배포 구조 분석

### 1. GitHub Pages의 두 가지 유형
- **사용자/조직 사이트**: `username.github.io` 저장소에 배포
  - URL: `https://username.github.io`
  - 특징: 사용자당 하나만 가능, 루트 도메인 사용
  - 배포 브랜치: 일반적으로 `main` 또는 `master` 브랜치

- **프로젝트 사이트**: 일반 저장소에 배포
  - URL: `https://username.github.io/repository-name/`
  - 특징: 사용자당 여러 개 가능, 저장소 이름이 경로에 포함
  - 배포 방식: GitHub Actions 또는 특정 브랜치(gh-pages)

### 2. 현재 상황 분석
- 사용자 사이트 URL(`https://younsanghoon.github.io/`)에 이미 다른 프로젝트("성격 분석 테스트") 배포됨
- PalmReading 프로젝트는 프로젝트 사이트 URL(`https://younsanghoon.github.io/PalmReading/`)로 접근해야 함
- vite.config.ts의 base URL을 `/PalmReading/`로 설정한 것은 올바른 접근
- 배포 과정이 완료되지 않았거나 GitHub Actions 워크플로우에 문제가 있을 수 있음

## GitHub Pages 배포 프로세스

### 1. GitHub Actions 워크플로우 분석
```yaml
# .github/workflows/static.yml
name: Deploy static content to Pages
on:
  push:
    branches: ["main"]
  workflow_dispatch:
# ... 중략 ...
jobs:
  deploy:
    # ... 중략 ...
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      # ... 중략 ...
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist/public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

### 2. 배포 과정 단계별 설명
1. 코드 체크아웃: 저장소 코드를 GitHub Actions 러너에 복제
2. Node.js 설정: 빌드 환경 구성
3. 의존성 설치: `npm install` 실행
4. 빌드: `npm run build` 실행 (이 단계에서 vite.config.ts의 base URL 설정 적용)
5. 빌드 결과물 업로드: `./dist/public` 디렉토리의 내용을 아티팩트로 업로드
6. GitHub Pages 배포: 업로드된 아티팩트를 GitHub Pages에 배포

### 3. 워크플로우 재실행 방법
- 빈 커밋 생성하여 워크플로우 트리거 (현재 적용한 방법)
- GitHub 웹 인터페이스에서 Actions 탭 > 워크플로우 > Re-run jobs 버튼 사용
- 저장소 설정에서 Pages 배포 수동 트리거 (일부 경우에만 가능)

## 문제 해결 전략

### 1. URL 접근 방식 확인
- 프로젝트 사이트는 반드시 저장소 이름을 포함한 경로로 접근해야 함
- 올바른 URL: `https://younsanghoon.github.io/PalmReading/`
- 사용자 사이트 URL(`https://younsanghoon.github.io/`)은 다른 프로젝트를 위해 이미 사용 중

### 2. GitHub Actions 워크플로우 상태 확인
- GitHub 저장소의 Actions 탭에서 최근 워크플로우 실행 상태 확인
- 워크플로우가 성공적으로 완료되었는지 확인
- 실패한 경우 오류 로그를 분석하여 문제 해결

### 3. GitHub Pages 설정 확인
- GitHub 저장소의 Settings > Pages 메뉴에서 배포 설정 확인
- Source가 "GitHub Actions"로 설정되어 있는지 확인
- 배포된 사이트의 URL이 올바르게 표시되는지 확인

### 4. 배포 대기 시간 고려
- GitHub Pages 배포는 워크플로우 완료 후에도 몇 분 정도 시간이 소요될 수 있음
- 워크플로우 완료 후 5-10분 정도 기다린 후 다시 접속 시도

## 향후 권장사항

### 1. 배포 URL 문서화
- README.md에 프로젝트 접속 URL 명시
- 사용자/프로젝트 사이트의 차이점 설명
- 올바른 접속 URL 안내: `https://younsanghoon.github.io/PalmReading/`

### 2. 배포 자동화 개선
- 배포 성공/실패 시 알림 설정 고려
- 배포 전 자동화된 테스트 추가
- 배포 후 사이트 접근성 확인 스크립트 추가

### 3. 개발/프로덕션 환경 구분
- 개발 환경과 프로덕션 환경의 base URL 설정 분리
- 환경 변수를 활용한 동적 base URL 설정 고려 
# 프로젝트 분석: GitHub Pages에서 SPA 라우팅 문제 해결

## 문제 분석

### 1. 발생한 문제
- GitHub Pages 사용자 사이트(`younsanghoon.github.io`)에 접속 시 다른 프로젝트("성격 분석 테스트")가 표시됨
- 프로젝트 사이트(`younsanghoon.github.io/PalmReading/`)에 접속 시 새로고침하면 404 오류 발생
- SPA(Single Page Application) 라우팅이 GitHub Pages 환경에서 제대로 작동하지 않음

### 2. 원인 파악
- GitHub Pages는 클라이언트 사이드 라우팅을 기본적으로 지원하지 않음
- SPA에서 페이지 새로고침 시 서버에 실제 경로 요청이 발생하지만, GitHub Pages는 해당 경로의 파일을 찾을 수 없음
- index.html에서 base path(`/PalmReading/`)를 제거하는 코드가 GitHub Pages 환경에서 문제를 일으킴
- 404.html의 리다이렉트 로직이 저장소 이름을 올바르게 처리하지 않음

### 3. SPA 라우팅과 GitHub Pages
- GitHub Pages는 정적 호스팅 서비스로, 서버 측 리다이렉션을 지원하지 않음
- SPA는 클라이언트 사이드 라우팅을 사용하여 페이지 전환 없이 콘텐츠 변경
- 두 기술의 충돌로 인해 새로고침 시 404 오류가 발생하는 것이 일반적인 문제
- 이 문제를 해결하기 위해 404.html을 활용한 리다이렉트 트릭이 필요

## 해결 방법

### 1. 404.html 파일 수정
```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>성격 분석 테스트 센터</title>
  <script type="text/javascript">
    // SPA 라우팅을 위한 리다이렉트 - GitHub Pages의 저장소 이름을 고려
    var segmentCount = 1; // PalmReading 저장소를 위한 설정
    var l = window.location;
    
    // 디버그 로그
    console.log("404 redirect - Original URL:", l.href);
    console.log("404 redirect - Pathname:", l.pathname);
    
    // GitHub Pages 저장소 경로 유지
    var repoPath = "/PalmReading";
    
    l.replace(
      l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
      repoPath + '/?/' +
      l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +
      (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
      l.hash
    );
  </script>
</head>
<body>
  리다이렉트 중...
</body>
</html>
```

### 2. index.html 파일 수정
```javascript
// 프로덕션 환경에서 base path 유지 (수정됨)
if (!isDev && pathname.startsWith('/PalmReading')) {
  console.log("[SPA Redirect] Keeping base path:", pathname);
  // base path를 제거하지 않고 유지
}
```

### 3. 작동 원리
1. 사용자가 `younsanghoon.github.io/PalmReading/some-route`에 접속하거나 새로고침
2. GitHub Pages는 해당 경로의 파일을 찾을 수 없어 404.html 제공
3. 404.html의 스크립트가 실행되어 URL을 `younsanghoon.github.io/PalmReading/?/some-route`로 변경
4. index.html이 로드되고 `?/some-route` 파라미터를 해석하여 적절한 라우트 표시
5. 이후 SPA 내부 네비게이션은 정상적으로 작동

## 기술적 고려사항

### 1. GitHub Pages의 SPA 호스팅 제약
- GitHub Pages는 모든 요청을 실제 파일에 매핑하려고 시도
- 존재하지 않는 경로 요청 시 404.html을 제공
- SPA 라우팅을 위해서는 이 404 리다이렉트 트릭이 필요

### 2. base URL 설정의 중요성
- Vite의 `base: '/PalmReading/'` 설정은 정적 자산 경로에 접두사 추가
- SPA 라우팅에서도 이 base path를 고려해야 함
- base path를 제거하는 코드는 GitHub Pages 환경에서 문제를 일으킬 수 있음

### 3. 디버그 로그 추가
- 복잡한 라우팅 문제를 해결하기 위해 디버그 로그 추가
- 404 리다이렉트와 SPA 라우팅 과정을 콘솔에 기록
- 문제 발생 시 디버깅에 도움이 됨

## 향후 권장사항

### 1. SPA 라우팅 라이브러리 활용
- React Router와 같은 라이브러리에서 `basename` 설정 확인
- 라우팅 라이브러리가 base path를 올바르게 처리하도록 설정

### 2. 환경별 설정 분리
```javascript
// vite.config.ts
export default defineConfig({
  // ... 기존 설정 ...
  base: process.env.NODE_ENV === 'production' ? '/PalmReading/' : '/',
  // ... 기존 설정 ...
})
```

### 3. 배포 전 테스트
- 로컬에서 프로덕션 빌드 후 정적 서버로 테스트
- `npm run build && npx serve -s dist/public`로 로컬 테스트
- 모든 라우트와 새로고침 시나리오 테스트

### 4. 대안 고려
- Netlify, Vercel 등 SPA에 더 친화적인 호스팅 서비스 고려
- 이러한 서비스는 SPA 리다이렉트를 기본 지원하여 설정이 간편 
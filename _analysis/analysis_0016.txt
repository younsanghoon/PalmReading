# 분석 보고서: SPA 라우팅 문제 및 해결 방안

## 문제 개요
PalmReading 웹 애플리케이션에서 테스트 페이지(animal-test, mbti-test, enneagram-test, palm-test)로 이동이 되지 않는 문제가 발생했습니다. 사용자가 홈페이지에서 테스트 카드를 클릭해도 페이지 전환이 이루어지지 않았습니다.

## 기술적 분석

### 1. 라우팅 시스템 구조
- **라이브러리**: wouter (React 라우팅 라이브러리)
- **커스텀 훅**: useBasePath (base path 처리를 위한 커스텀 훅)
- **라우팅 방식**: SPA(Single Page Application) 라우팅

### 2. 발견된 문제점

#### 2.1 경로 정규화 문제
- 개발 환경과 프로덕션 환경에서 base path 처리 방식이 달랐습니다.
- 개발 환경: 빈 문자열 (`""`)
- 프로덕션 환경: `/PalmReading`
- 이로 인해 경로 정규화 과정에서 불일치가 발생했습니다.

#### 2.2 중복 네비게이션 방지 로직 문제
- 현재 경로와 새 경로가 같은 경우 네비게이션을 방지하는 로직이 있었습니다.
- 그러나 이 로직이 정규화된 경로를 고려하지 않아 정상적인 네비게이션도 차단했습니다.
```typescript
// 문제가 있는 코드
if (loc === newPath) {
  console.log("[Router] Already at this location, not navigating");
  return;
}
```

#### 2.3 테스트 카드 클릭 핸들러 문제
- 테스트 카드 클릭 시 navigate 함수만 호출하고 네비게이션 성공 여부를 확인하지 않았습니다.
- 네비게이션 실패 시 대체 방안이 없었습니다.

#### 2.4 서버 측 템플릿 처리 문제
- 서버에서 클라이언트 템플릿(index.html)을 처리할 때 잘못된 base path가 포함된 경로가 있었습니다.
- `/PalmReading/` 접두사가 개발 환경에서도 사용되어 리소스 로딩에 문제가 발생했습니다.

## 해결 방안

### 1. App.tsx 수정
- useBasePath 훅에 상세 로깅을 추가하여 디버깅을 용이하게 했습니다.
- 정규화된 경로 비교 로직을 추가하여 중복 네비게이션 방지 로직을 개선했습니다.
```typescript
// 추가된 코드
if (normalizedLoc === normalizedTo) {
  console.log("[Router] Already at normalized location, not navigating");
  return;
}
```

### 2. home.tsx 수정
- handleTestClick 함수를 개선하여 네비게이션 실패 시 대체 방안을 추가했습니다.
- 현재 위치와 목적지가 같은 경우 페이지 강제 리로드 로직을 추가했습니다.
- setTimeout을 통한 네비게이션 성공 여부 확인 로직을 추가했습니다.
```typescript
// 추가된 코드
setTimeout(() => {
  console.log("[Home] After navigation, current location:", window.location.pathname);
  
  // 네비게이션이 실패했는지 확인 (URL이 변경되지 않은 경우)
  if (window.location.pathname === location) {
    console.log("[Home] Navigation may have failed, trying direct URL change");
    window.location.href = normalizedHref;
  }
}, 100);
```

### 3. server/vite.ts 수정
- 디버깅용 미들웨어를 추가하여 요청 정보를 상세하게 로깅했습니다.
- 테스트 페이지 요청 확인 로직을 추가하여 특정 페이지 요청을 추적했습니다.
- 템플릿에서 잘못된 base path 제거 로직을 추가했습니다.
```typescript
// 추가된 코드
template = template.replace(/href="\/PalmReading\//g, 'href="/');
template = template.replace(/src="\/PalmReading\//g, 'src="/');
```

## 교훈 및 권장사항

### 1. SPA 라우팅 설계 시 고려사항
- **일관된 경로 정규화**: 모든 경로가 일관된 형식(예: 항상 슬래시로 시작)을 가지도록 정규화해야 합니다.
- **환경별 설정 분리**: 개발 환경과 프로덕션 환경의 차이를 명확히 구분하고 관리해야 합니다.
- **실패 처리 로직**: 네비게이션 실패 시 대체 방안을 항상 준비해야 합니다.

### 2. 디버깅 전략
- **상세 로깅**: 라우팅 과정의 각 단계에서 상세한 로깅을 추가하여 문제 진단을 용이하게 해야 합니다.
- **요청-응답 추적**: 서버와 클라이언트 간의 요청-응답 흐름을 추적하여 불일치를 발견해야 합니다.
- **사용자 경험 고려**: 라우팅 실패 시에도 사용자에게 적절한 피드백을 제공해야 합니다.

### 3. 코드 구조 개선
- **라우팅 로직 모듈화**: 라우팅 관련 로직을 별도의 모듈로 분리하여 관리하는 것이 좋습니다.
- **환경 설정 중앙화**: 환경별 설정을 중앙에서 관리하여 일관성을 유지해야 합니다.
- **테스트 강화**: 다양한 라우팅 시나리오에 대한 테스트를 추가하여 안정성을 확보해야 합니다.

## 결론
SPA 라우팅 문제는 경로 정규화, 중복 네비게이션 방지 로직, 환경별 설정 차이 등 여러 요소가 복합적으로 작용하여 발생했습니다. 이번 수정을 통해 라우팅 안정성이 크게 향상되었으며, 향후 유사한 문제를 방지하기 위한 로깅 및 디버깅 체계도 강화되었습니다. 추가적으로 라우팅 로직의 모듈화 및 테스트 강화를 통해 더욱 안정적인 애플리케이션을 구축할 수 있을 것입니다. 
# 분석 보고서: SPA 라우팅 시스템 개선 및 문제 해결

## 문제 개요
PalmReading 웹 애플리케이션에서 테스트 페이지(animal-test, mbti-test, enneagram-test, palm-test)로의 라우팅이 작동하지 않는 문제가 지속적으로 발생했습니다. 이전 수정에도 불구하고 서버 로그에서는 요청이 감지되지만 실제 페이지 전환이 이루어지지 않았습니다.

## 기술적 분석

### 1. SPA 라우팅 아키텍처 분석

#### 1.1 현재 구조
- **클라이언트 라우터**: wouter 라이브러리 사용
- **커스텀 훅**: useBasePath (base path 처리를 위한 커스텀 훅)
- **서버**: Express + Vite 개발 서버
- **배포 환경**: GitHub Pages (base path: /PalmReading)

#### 1.2 라우팅 흐름
1. 사용자가 테스트 카드 클릭
2. home.tsx의 handleTestClick 함수 호출
3. wouter의 navigate 함수 호출
4. useBasePath 훅에서 window.history.pushState 호출
5. 내부 상태(loc) 업데이트
6. 라우터가 새 컴포넌트 렌더링 시도

### 2. 발견된 핵심 문제점

#### 2.1 wouter 라우터의 작동 방식 문제
- wouter는 내부적으로 URL 변경을 감지하는 방식으로 작동
- window.history.pushState 호출 후 자동으로 라우팅 변경을 감지하지 못함
- popstate 이벤트는 브라우저 뒤로/앞으로 버튼 클릭 시에만 발생

```typescript
// 문제가 있는 코드
window.history.pushState(null, "", newPath);
setLoc(newPath);
// 여기서 라우터가 변경을 감지하지 못함
```

#### 2.2 서버 측 SPA 라우트 처리 부재
- 서버가 /animal-test 등의 경로를 SPA 라우트로 인식하지 못함
- 직접 해당 경로로 접근 시 404 오류 발생 가능성
- 개발 서버와 프로덕션 서버의 라우트 처리 방식 불일치

#### 2.3 클라이언트-서버 간 라우팅 불일치
- 클라이언트는 SPA 방식으로 라우팅 처리
- 서버는 각 경로를 별도의 리소스로 처리
- base path 처리 방식의 불일치

### 3. 해결 방안 상세 분석

#### 3.1 직접 URL 변경 방식 도입
- wouter의 navigate 함수 대신 window.location.href 직접 변경
- 장점: 브라우저가 실제 페이지 요청을 수행하므로 확실한 라우팅
- 단점: SPA의 장점인 부분 렌더링이 아닌 전체 페이지 리로드 발생

```typescript
// 수정된 코드
window.location.href = normalizedHref;
```

#### 3.2 서버 측 SPA 라우트 처리 강화
- 모든 SPA 라우트를 명시적으로 정의
- 해당 라우트 요청 시 항상 index.html 반환
- 클라이언트에 SPA 라우트 정보 전달

```typescript
// 서버 측 SPA 라우트 정의
const SPA_ROUTES = [
  '/',
  '/animal-test',
  '/mbti-test',
  '/enneagram-test',
  '/palm-test',
  '/privacy-policy',
  '/terms-of-service',
  '/contact'
];

// SPA 라우트 요청 처리
app.use(SPA_ROUTES, (req, res) => {
  res.sendFile(path.resolve(distPath, "index.html"));
});
```

#### 3.3 클라이언트 측 SPA 초기화 개선
- 페이지 로드 시 SPA 라우팅 초기화
- 링크 클릭 이벤트 직접 처리
- 개발/프로덕션 환경 자동 감지

```javascript
// 클라이언트 측 SPA 초기화
document.addEventListener('DOMContentLoaded', function() {
  // SPA 라우트 목록
  var spaRoutes = ['/', '/animal-test', '/mbti-test', '/enneagram-test', '/palm-test', 
                   '/privacy-policy', '/terms-of-service', '/contact'];
  
  // 링크 클릭 이벤트 처리
  document.body.addEventListener('click', function(e) {
    // 링크 클릭 확인 및 처리
    // ...
  });
});
```

#### 3.4 디버깅 도구 강화
- 전역 디버그 라우터 추가
- 상세 로깅 추가
- 라우팅 실패 시 폴백 메커니즘 구현

```typescript
// 디버깅을 위한 전역 함수
(window as any).__debugRouter = {
  location,
  navigate,
  goTo: (path: string) => {
    console.log("[DebugRouter] Manual navigation to:", path);
    navigate(path);
  }
};
```

### 4. 구현 상세 분석

#### 4.1 App.tsx 수정
- useBasePath 훅 개선
  - 중복 네비게이션 시 강제 리로드 로직 추가
  - 히스토리 API 사용 후 커스텀 popstate 이벤트 발생
  - URL 변경 확인 및 폴백 메커니즘 추가
- CustomRouter 컴포넌트 추가
  - 디버깅을 위한 전역 함수 제공
  - 라우팅 상태 모니터링

#### 4.2 home.tsx 수정
- 테스트 카드 클릭 핸들러 개선
  - 직접 URL 변경 방식 사용
  - 디버그 라우터 활용
- 푸터 네비게이션 버튼 수정
  - 모든 네비게이션을 직접 URL 변경 방식으로 통일

#### 4.3 server/vite.ts 수정
- SPA 라우트 전용 미들웨어 추가
- 클라이언트에 SPA 라우트 정보 전달
- 템플릿 처리 로직 개선

#### 4.4 client/index.html 수정
- SPA 라우팅 초기화 스크립트 추가
- 링크 클릭 이벤트 처리 로직 추가
- 개발/프로덕션 환경 자동 감지 로직 추가

## 교훈 및 권장사항

### 1. SPA 라우팅 설계 원칙
- **서버-클라이언트 일관성**: SPA 라우팅은 서버와 클라이언트 양쪽 모두에서 일관되게 처리해야 함
- **명시적 라우트 정의**: 모든 라우트를 명시적으로 정의하고 중앙에서 관리
- **환경별 설정 분리**: 개발 환경과 프로덕션 환경의 차이를 명확히 구분하고 관리
- **폴백 메커니즘**: 라우팅 실패 시 대체 방안을 항상 준비

### 2. 라우팅 라이브러리 선택 시 고려사항
- **작동 방식 이해**: 라이브러리의 내부 작동 방식을 충분히 이해해야 함
- **환경 호환성**: 다양한 환경(개발, 프로덕션, 정적 호스팅 등)에서의 호환성 검토
- **커스터마이징 용이성**: 필요에 따라 확장하거나 수정할 수 있는 유연성
- **디버깅 용이성**: 문제 발생 시 디버깅이 용이한 구조

### 3. 디버깅 전략
- **상세 로깅**: 라우팅 과정의 각 단계에서 상세한 로깅 추가
- **전역 디버깅 도구**: 콘솔에서 직접 라우팅을 테스트할 수 있는 도구 제공
- **환경별 테스트**: 모든 환경에서 라우팅 동작 검증

## 결론
SPA 라우팅 문제는 클라이언트 측 라우터의 작동 방식과 서버 측 라우트 처리의 불일치에서 비롯되었습니다. 이번 수정을 통해 직접 URL 변경 방식을 도입하고, 서버 측 SPA 라우트 처리를 강화하며, 클라이언트 측 SPA 초기화를 개선함으로써 안정적인 라우팅 시스템을 구축했습니다. 또한 디버깅 도구를 강화하여 향후 유사한 문제 발생 시 신속한 대응이 가능하도록 했습니다.

이러한 개선을 통해 사용자는 이제 모든 테스트 페이지로 원활하게 이동할 수 있으며, 개발자는 더욱 안정적이고 유지보수가 용이한 라우팅 시스템을 활용할 수 있게 되었습니다. 
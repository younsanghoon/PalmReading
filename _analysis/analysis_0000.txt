# PalmReading 프로젝트 분석

## 프로젝트 개요
PalmReading은 AI와 심리학을 기반으로 한 성격 분석 테스트 웹 애플리케이션입니다. 사용자들은 동물상 테스트, MBTI 테스트, 에니어그램 테스트, 손금 테스트 등 다양한 성격 분석 도구를 이용할 수 있습니다. 특히 손금 분석 기능은 AI를 활용하여 사용자의 손금 사진을 분석하고 결과를 제공합니다.

## 프로젝트 구조

### 주요 디렉토리
- `client/`: 프론트엔드 코드 (React, TypeScript)
  - `src/`: 소스 코드
    - `components/`: UI 컴포넌트
    - `hooks/`: 커스텀 훅
    - `lib/`: 유틸리티 및 라이브러리
    - `pages/`: 페이지 컴포넌트
    - `types/`: TypeScript 타입 정의
- `server/`: 백엔드 코드 (Express.js)
- `shared/`: 클라이언트와 서버 간 공유 코드
- `attached_assets/`: AI 모델 및 관련 자산

### 주요 기술 스택
- 프론트엔드: React, TypeScript, TailwindCSS
- 백엔드: Express.js, Node.js
- AI: TensorFlow.js, Teachable Machine
- 상태 관리: React Query
- 라우팅: Wouter
- UI 컴포넌트: Radix UI
- 데이터베이스: Drizzle ORM (NeonDB)
- 배포: PWA (Progressive Web App)

## 핵심 기능 분석

### 1. 성격 테스트 시스템
프로젝트는 다양한 성격 테스트를 제공합니다:
- 동물상 테스트: AI를 사용하여 사용자의 얼굴 이미지를 분석하고 닮은 동물을 판별
- MBTI 테스트: 질문 응답을 통한 MBTI 성격 유형 분석
- 에니어그램 테스트: 질문 응답을 통한 에니어그램 유형 분석
- 손금 테스트: AI를 사용하여 사용자의 손금 이미지를 분석하고 결과 제공

### 2. AI 모델 통합
- TensorFlow.js를 사용하여 클라이언트 측에서 AI 모델 실행
- `@teachablemachine/image` 라이브러리를 활용한 이미지 분석
- 모델 파일은 `attached_assets/` 디렉토리에 저장됨
- 손금 분석을 위한 여러 모델 (생명선, 감정선, 지능선, 운명선, 능력선)

### 3. 다국어 지원
- 한국어, 영어, 일본어, 중국어, 인도네시아어, 태국어, 베트남어 지원
- `i18n.ts` 파일에서 다국어 처리 로직 구현
- `LanguageSelector` 컴포넌트를 통한 언어 전환 기능

### 4. PWA 지원
- 서비스 워커 구현으로 오프라인 기능 지원
- 매니페스트 파일 및 아이콘 설정
- 모바일 디바이스에 설치 가능한 웹 앱 형태

## 주요 컴포넌트 분석

### 클라이언트 측
1. **페이지 컴포넌트**:
   - `home.tsx`: 메인 페이지, 테스트 목록 표시
   - `palm-test.tsx`: 손금 테스트 페이지
   - `animal-test.tsx`: 동물상 테스트 페이지
   - `mbti-test.tsx`: MBTI 테스트 페이지
   - `enneagram-test.tsx`: 에니어그램 테스트 페이지

2. **테스트 컴포넌트**:
   - `palm-reading-test.tsx`: 손금 분석 테스트 구현
   - `animal-face-test.tsx`: 동물상 테스트 구현
   - `mbti-test.tsx`: MBTI 테스트 구현
   - `enneagram-test.tsx`: 에니어그램 테스트 구현

3. **커스텀 훅**:
   - `use-teachable-machine.ts`: AI 모델 예측 기능 제공
   - `use-image-upload.ts`: 이미지 업로드 및 처리 기능
   - `use-mobile.tsx`: 모바일 기기 감지 기능
   - `use-toast.ts`: 토스트 알림 기능

4. **유틸리티**:
   - `ai-models.ts`: AI 모델 로딩 및 예측 함수
   - `encryption.ts`: 모델 URL 암호화/복호화 기능
   - `personality-data.ts`: 성격 유형 데이터

### 서버 측
1. **API 서버**:
   - `index.ts`: Express 서버 설정
   - `routes.ts`: API 라우트 정의
   - `storage.ts`: 데이터 저장 및 조회 기능

2. **Vite 통합**:
   - `vite.ts`: Vite 개발 서버 설정 및 정적 파일 제공

## 데이터 흐름
1. 사용자가 테스트 페이지에 접근
2. 테스트 유형에 따라 질문 응답 또는 이미지 업로드
3. AI 모델 기반 테스트의 경우:
   - 이미지 업로드 → 이미지 전처리 → AI 모델 예측 → 결과 표시
4. 질문 기반 테스트의 경우:
   - 질문 표시 → 사용자 응답 수집 → 점수 계산 → 결과 표시
5. 결과는 로컬 스토리지에 저장되어 재방문 시 확인 가능

## 주요 파일 및 기능

### AI 모델 관련
- `client/src/lib/ai-models.ts`: AI 모델 로딩 및 예측 함수
  - `loadAnimalModel()`: 동물상 모델 로딩
  - `loadPalmModels()`: 손금 분석 모델 로딩
  - `predictAnimalFace()`: 동물상 예측
  - `predictPalmReading()`: 손금 분석 예측

### 손금 분석 관련
- `client/src/components/personality-tests/palm-reading-test.tsx`: 손금 분석 UI 및 로직
  - 이미지 업로드 및 분석 프로세스 관리
  - 결과 표시 및 차트 생성
  - 공유 기능

### 인프라 관련
- `server/index.ts`: Express 서버 설정 및 실행
- `vite.config.ts`: Vite 빌드 설정
- `client/public/sw.js`: 서비스 워커 구현

## 실행 방법
1. 의존성 설치: `npm install`
2. 개발 모드 실행: `npm run dev`
3. 프로덕션 빌드: `npm run build`
4. 프로덕션 실행: `npm start`

## 향후 분석 필요 사항
1. AI 모델의 정확도 및 성능 평가
2. 다국어 지원의 완성도 확인
3. PWA 기능의 정상 작동 여부 테스트
4. 서버 API의 기능 및 데이터베이스 연동 상태 확인 
# PalmReading 프로젝트 분석: 동물상 테스트 오류 수정

## 1. 문제 개요

동물상 테스트 페이지에서 다음과 같은 오류가 발생했습니다:
```
[plugin:runtime-error-plugin] Cannot destructure property 'modelURL' of 'undefined' as it is undefined.
```

이 오류는 `useTeachableMachine` 훅을 사용할 때 필수 매개변수인 `modelURL`과 `metadataURL`을 전달하지 않아 발생했습니다. 이는 이전에 손금 테스트 페이지에서 발생했던 문제와 동일한 패턴입니다.

## 2. 코드 분석

### 2.1 useTeachableMachine 훅 구조

```typescript
interface UseTeachableMachineProps {
  modelURL: string;
  metadataURL: string;
}

export function useTeachableMachine({ modelURL, metadataURL }: UseTeachableMachineProps) {
  // ...훅 구현...
}
```

이 훅은 `modelURL`과 `metadataURL`을 필수 매개변수로 요구하지만, 동물상 테스트 컴포넌트에서는 이를 전달하지 않았습니다.

### 2.2 animal-face-test.tsx 문제 코드

```typescript
const { 
  predictAnimal, 
  isLoading: isAnalyzing, 
  error: analysisError 
} = useTeachableMachine(); // 매개변수 없이 호출
```

매개변수 없이 훅을 호출하여 `modelURL`과 `metadataURL`이 undefined로 전달되었습니다.

## 3. 해결 방법

### 3.1 모델 URL 명시적 정의

```typescript
// 모델 URL 정의
const modelURL = '/attached_assets/model_1752161703239.json';
const metadataURL = '/attached_assets/metadata_1752161703239.json';

const { 
  predictAnimal,
  isLoading: isAnalyzing, 
  error: analysisError 
} = useTeachableMachine({ modelURL, metadataURL });
```

### 3.2 predictAnimal 함수 추가

`useTeachableMachine` 훅에 `predictAnimal` 함수를 추가하여 동물상 테스트에서 사용할 수 있도록 했습니다.

```typescript
// 동물상 예측 함수 - 기존 predict 함수를 사용하는 래퍼 함수
const predictAnimal = async (imageElement: HTMLImageElement) => {
  console.log('[TeachableMachine] Starting animal face prediction');
  return await predict(imageElement);
};

// 반환 객체에 추가
return {
  model,
  predictions,
  isLoading,
  error,
  predict,
  predictAnimal,
  predictFromFile,
};
```

### 3.3 오류 처리 개선

```typescript
const handleAnalyze = async () => {
  const imageElement = await createImageElement();
  if (!imageElement) return;

  setCurrentStep('analyzing');
  
  try {
    const predictions = await predictAnimal(imageElement);
    if (predictions && predictions.length > 0) {
      // 결과 처리
    } else {
      setCurrentStep('upload');
      console.error('[AnimalFaceTest] No predictions returned');
      alert('분석에 실패했습니다. 다른 사진으로 다시 시도해 주세요.');
    }
  } catch (error) {
    console.error('[AnimalFaceTest] Analysis error:', error);
    setCurrentStep('upload');
    alert('분석 중 오류가 발생했습니다. 다시 시도해 주세요.');
  }
};
```

## 4. 교훈 및 모범 사례

### 4.1 타입스크립트 인터페이스 준수

훅이나 함수를 사용할 때 타입스크립트 인터페이스에서 요구하는 매개변수를 정확히 전달해야 합니다. 특히 필수 매개변수는 반드시 제공해야 합니다.

### 4.2 예외 처리의 중요성

비동기 작업에서는 항상 예외 처리를 구현해야 합니다. 특히 외부 라이브러리나 AI 모델을 사용할 때는 더욱 중요합니다.

```typescript
try {
  // 비동기 작업
} catch (error) {
  // 오류 처리 및 사용자 피드백
  console.error('[ComponentName] Error description:', error);
  alert('사용자 친화적인 오류 메시지');
}
```

### 4.3 일관된 패턴 적용

프로젝트 내에서 동일한 문제가 여러 곳에서 발생할 수 있습니다. 한 곳에서 문제를 해결한 방식을 다른 유사한 상황에도 일관되게 적용해야 합니다.

## 5. 향후 개선 방향

### 5.1 기본값 제공

훅에 기본값을 제공하여 매개변수가 누락되더라도 최소한의 기능이 작동하도록 할 수 있습니다.

```typescript
export function useTeachableMachine({ 
  modelURL = '/default/model.json', 
  metadataURL = '/default/metadata.json' 
}: Partial<UseTeachableMachineProps> = {}) {
  // ...
}
```

### 5.2 모델 URL 중앙 관리

모델 URL을 중앙에서 관리하여 여러 컴포넌트에서 일관되게 사용할 수 있도록 합니다.

```typescript
// ai-models.ts
export const MODEL_URLS = {
  animal: {
    model: '/attached_assets/animal_model.json',
    metadata: '/attached_assets/animal_metadata.json'
  },
  palm: {
    model: '/attached_assets/palm_model.json',
    metadata: '/attached_assets/palm_metadata.json'
  }
};
```

### 5.3 에러 처리 표준화

프로젝트 전체에서 일관된 에러 처리 패턴을 적용하는 것이 좋습니다.

```typescript
// error-handler.ts
export function handleApiError(error: any, component: string) {
  console.error(`[${component}] Error:`, error);
  // 오류 로깅, 사용자 알림 등
}
```

## 6. 결론

이번 수정을 통해 동물상 테스트 페이지의 오류를 해결했습니다. 이 경험은 타입스크립트 인터페이스 준수, 적절한 예외 처리, 일관된 코드 패턴 적용의 중요성을 보여줍니다. 향후에는 기본값 제공, 모델 URL 중앙 관리, 에러 처리 표준화 등의 개선을 고려할 수 있습니다. 
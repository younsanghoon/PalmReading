# GitHub Pages 배포 자동화 분석

## 문제 요약
GitHub Pages 배포가 수동으로 이루어지고 있어 홈 페이지 변경 사항이 웹사이트에 반영되지 않는 문제가 발생했습니다. 이를 해결하기 위해 GitHub Actions를 사용한 자동 배포 워크플로우를 구성했습니다.

## 원인 분석

### 1. 수동 배포의 한계
- `npm run deploy` 명령어를 수동으로 실행해야 함
- 로컬 환경에서 빌드 오류가 발생할 가능성이 있음
- 배포 과정에서 사용자 실수 가능성이 높음

### 2. GitHub Pages 설정 문제
- GitHub 저장소 설정에서 Pages 소스가 gh-pages 브랜치로 설정되어 있음
- 최근 GitHub Pages는 GitHub Actions를 통한 배포를 권장함
- 기존 방식은 GitHub의 최신 권장 사항을 따르지 않음

## 해결 방안

### 1. GitHub Actions 워크플로우 구성
GitHub Actions를 사용하여 main 브랜치에 변경 사항이 푸시될 때마다 자동으로 빌드 및 배포하는 워크플로우를 구성했습니다.

```yaml
name: GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/public
          force_orphan: true
```

### 2. 워크플로우 구성 요소 분석

#### 트리거 설정
```yaml
on:
  push:
    branches:
      - main
```
- main 브랜치에 푸시가 발생할 때마다 워크플로우 실행
- 다른 브랜치에 대한 푸시는 무시

#### 권한 설정
```yaml
permissions:
  contents: write
```
- GitHub Pages 배포를 위해 저장소 내용에 대한 쓰기 권한 필요
- GITHUB_TOKEN에 write 권한을 부여하여 gh-pages 브랜치에 푸시 가능

#### 동시성 제어
```yaml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
```
- 동일한 브랜치에 대한 여러 워크플로우 실행을 방지
- 이전 워크플로우가 실행 중일 때 새 워크플로우가 시작되면 이전 워크플로우 취소

#### 배포 설정
```yaml
- name: Deploy
  uses: peaceiris/actions-gh-pages@v4
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    publish_dir: ./dist/public
    force_orphan: true
```
- peaceiris/actions-gh-pages 액션을 사용하여 GitHub Pages 배포
- GITHUB_TOKEN을 사용하여 인증 (별도의 설정 불필요)
- dist/public 디렉토리의 내용을 gh-pages 브랜치에 배포
- force_orphan: true 옵션으로 gh-pages 브랜치를 항상 최신 상태로 유지

## 기술적 세부사항

### 1. GitHub Actions 워크플로우 파일 위치
- `.github/workflows/gh-pages.yml` 파일에 워크플로우 정의
- GitHub에서 이 경로의 YAML 파일을 자동으로 워크플로우로 인식

### 2. Node.js 환경 설정
```yaml
- name: Setup Node
  uses: actions/setup-node@v4
  with:
    node-version: '18'
```
- Node.js 18 버전을 사용하여 빌드 환경 구성
- 프로젝트의 package.json과 호환되는 버전 선택

### 3. 의존성 설치 및 빌드
```yaml
- name: Install dependencies
  run: npm ci

- name: Build
  run: npm run build
```
- `npm ci`를 사용하여 정확한 의존성 버전 설치 (package-lock.json 기반)
- `npm run build`로 프로젝트 빌드 실행

### 4. peaceiris/actions-gh-pages 액션
- GitHub Pages 배포를 위한 널리 사용되는 액션
- 다양한 배포 옵션 제공
- 안정적이고 지속적인 업데이트

## 결론 및 권장사항
1. **GitHub Actions 워크플로우 모니터링**: 워크플로우 실행 결과를 주기적으로 확인하여 배포 오류 발견 시 즉시 대응
2. **GitHub Pages 설정 변경**: GitHub 저장소 설정에서 Pages 소스를 GitHub Actions로 변경
3. **배포 최적화**: 필요에 따라 캐싱 설정을 추가하여 빌드 속도 개선
4. **테스트 단계 추가**: 향후 테스트 단계를 워크플로우에 추가하여 배포 전 코드 품질 검증
5. **환경 변수 활용**: 필요한 경우 GitHub Secrets를 사용하여 환경 변수 관리 
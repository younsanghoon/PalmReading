# PalmReading 애플리케이션 경로 관리 및 404 에러 해결 분석

## 개요

PalmReading 애플리케이션은 개발 환경과 배포 환경(GitHub Pages)에서 동시에 작동해야 하는 SPA(Single Page Application)입니다. 이 문서는 개발 환경에서 발생한 404 에러의 원인과 해결 방법, 그리고 효과적인 경로 관리 전략에 대해 분석합니다.

## 문제 상황

개발 서버를 실행했을 때 다음과 같은 문제가 발생했습니다:

1. 정적 리소스(manifest.json, 아이콘 등)에 대한 404 에러
2. 페이지 간 라우팅 시 404 에러
3. 서비스 워커 등록 실패

이러한 문제의 근본 원인은 개발 환경과 배포 환경 간의 기본 경로(base path) 차이였습니다:

- **개발 환경**: 루트 경로(`/`)에서 애플리케이션 제공
- **배포 환경(GitHub Pages)**: 프로젝트 이름을 포함한 경로(`/PalmReading/`)에서 애플리케이션 제공

## 문제 해결 과정

### 1. 경로 불일치 식별

로깅을 통해 다음과 같은 경로 불일치를 확인했습니다:

```
[Router] Environment: development
[Router] Using base path: 
[Router] Original location: /
[Router] Normalized location: /

// 정적 리소스 요청 실패
GET /PalmReading/manifest.json 404
GET /PalmReading/icon-192.png 404
```

개발 환경에서는 base path가 빈 문자열("")이지만, HTML 및 manifest.json 파일에서는 `/PalmReading/` 접두사를 사용하고 있었습니다.

### 2. 클라이언트 경로 수정

HTML 파일과 manifest.json 파일에서 하드코딩된 `/PalmReading/` 접두사를 제거했습니다:

**client/index.html**:
```html
<!-- 수정 전 -->
<link rel="manifest" href="/PalmReading/manifest.json">
<link rel="apple-touch-icon" href="/PalmReading/icon-192.png">

<!-- 수정 후 -->
<link rel="manifest" href="/manifest.json">
<link rel="apple-touch-icon" href="/icon-192.png">
```

**client/public/manifest.json**:
```json
// 수정 전
{
  "start_url": "/PalmReading/",
  "icons": [
    {
      "src": "/PalmReading/icon-192.png",
      ...
    }
  ]
}

// 수정 후
{
  "start_url": "/",
  "icons": [
    {
      "src": "/icon-192.png",
      ...
    }
  ]
}
```

### 3. 동적 경로 관리 개선

`App.tsx`의 `useBasePath` 훅을 개선하여 개발 환경과 배포 환경을 명확히 구분하고, 로깅을 추가했습니다:

```typescript
// 개발 환경에서는 base path를 사용하지 않음
const isDev = process.env.NODE_ENV === 'development';

// 현재 실행 중인 URL의 base path 확인
const currentUrl = window.location.origin;
console.log("[Router] Current URL origin:", currentUrl);

// 개발 환경에서는 base path를 사용하지 않음
const basePath = isDev ? "" : "/PalmReading";

console.log("[Router] Environment:", isDev ? "development" : "production");
console.log("[Router] Using base path:", basePath);
```

### 4. 서버 측 로깅 및 템플릿 처리 개선

서버 코드(`server/vite.ts`)에서 로깅을 강화하고 템플릿 처리 과정을 개선했습니다:

```typescript
// 템플릿 처리 개선
template = template.replace(
  `href="/manifest.json"`,
  `href="/manifest.json?v=${nanoid()}"`,
);

log(`Transforming index.html for URL: ${url}`, "vite-transform");
```

## 경로 관리 전략

이 프로젝트의 경험을 바탕으로 SPA에서 효과적인 경로 관리 전략을 다음과 같이 정리할 수 있습니다:

### 1. 환경별 기본 경로(Base Path) 관리

- **개발 환경**: 일반적으로 루트 경로(`/`)를 사용
- **배포 환경**: 서비스 제공 경로에 따라 다름 (GitHub Pages의 경우 `/프로젝트명/`)
- **환경 변수 활용**: `process.env.NODE_ENV` 또는 별도의 환경 변수를 통해 구분

```typescript
// 예시
const basePath = process.env.NODE_ENV === 'development' 
  ? "" 
  : process.env.BASE_PATH || "/PalmReading";
```

### 2. 정적 리소스 경로 관리

- **상대 경로 사용**: 가능한 경우 상대 경로를 사용하여 기본 경로 변경에 영향을 받지 않도록 함
- **동적 경로 생성**: 템플릿 처리 시 기본 경로를 동적으로 주입

```html
<!-- 예시: 템플릿에서 변수 사용 -->
<link rel="manifest" href="<%= BASE_PATH %>/manifest.json">
```

### 3. 클라이언트 라우팅 관리

- **라우터 설정**: 기본 경로를 라우터 설정에 반영
- **경로 정규화**: 사용자 입력 URL에서 기본 경로를 제거하여 내부 라우팅 처리

```typescript
// 예시: 경로 정규화
const normalizedPath = path.startsWith(basePath) 
  ? path.slice(basePath.length) || "/" 
  : path;
```

### 4. 서비스 워커 범위 관리

- **서비스 워커 등록 경로**: 기본 경로를 고려하여 서비스 워커 등록
- **캐시 범위**: 기본 경로를 고려한 캐시 전략 수립

```javascript
// 예시: 환경에 따른 서비스 워커 등록 경로
const swPath = process.env.NODE_ENV === 'development' 
  ? '/sw.js' 
  : '/PalmReading/sw.js';

navigator.serviceWorker.register(swPath);
```

## 결론

SPA에서 개발 환경과 배포 환경 간의 경로 차이를 효과적으로 관리하는 것은 404 에러 방지와 원활한 사용자 경험을 위해 중요합니다. 이 프로젝트에서는 다음과 같은 접근 방식으로 문제를 해결했습니다:

1. 환경에 따른 기본 경로 동적 설정
2. 정적 리소스 경로의 일관성 유지
3. 클라이언트 라우팅의 경로 정규화
4. 서버 측 로깅 강화를 통한 문제 식별 용이성 확보

이러한 접근 방식은 GitHub Pages와 같은 하위 경로에 배포되는 SPA의 일반적인 문제를 해결하는 데 효과적인 패턴을 제공합니다. 
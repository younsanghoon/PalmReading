# GitHub 호스팅을 위한 프로젝트 수정 분석

## 프로젝트 구조 분석

### 원본 프로젝트 구조
- **프론트엔드**: React, TypeScript, TailwindCSS 기반의 SPA
- **백엔드**: Express.js 서버 (server/index.ts)
- **데이터베이스**: Drizzle ORM을 사용한 PostgreSQL 연결 구조
- **빌드 시스템**: Vite를 사용한 프론트엔드 빌드, esbuild를 사용한 서버 빌드

### 문제점 분석
1. **서버 의존성**:
   - Express.js 서버가 필요하여 정적 호스팅만으로는 완전한 기능 제공 불가
   - 서버는 localhost:5000으로 설정되어 GitHub Pages에서 직접 실행 불가

2. **데이터베이스 의존성**:
   - Drizzle ORM과 PostgreSQL 스키마 정의가 있어 데이터베이스 연결 필요
   - 현재는 메모리 스토리지를 사용하나, 실제 DB 연결이 필요한 구조

3. **API 호출 구조**:
   - 프론트엔드에서 백엔드 API를 호출하는 구조로 설계됨
   - GitHub Pages는 정적 호스팅만 지원하므로 API 호출 불가

## 수정 방향 및 전략

### 1. 백엔드 의존성 제거
- **로컬 데이터 활용**:
  - 서버 API 호출 대신 로컬 데이터(localStorage)를 활용하도록 변경
  - 정적 데이터를 클라이언트 측에 저장하여 서버 요청 대체

- **API 요청 시뮬레이션**:
  - queryClient.ts 수정으로 API 요청을 로컬 함수로 대체
  - 실제 서버 응답과 유사한 형태의 데이터 반환 구조 구현

### 2. GitHub Pages 호스팅 최적화
- **경로 설정**:
  - base 경로를 레포지토리 이름(/PalmReading/)으로 설정
  - 모든 자원 경로에 base 경로 추가

- **SPA 라우팅 지원**:
  - 404.html을 활용한 리다이렉트 설정
  - 히스토리 API를 활용한 라우팅 처리

### 3. PWA 기능 최적화
- **매니페스트 파일 업데이트**:
  - 경로 수정 및 추가 속성 설정
  - 아이콘, 스크린샷 등 경로 조정

- **서비스 워커 개선**:
  - 캐싱 전략 강화
  - 오프라인 지원 기능 추가

- **설치 가능성 구현**:
  - PWA 설치 버튼 컴포넌트 추가
  - 설치 프롬프트 처리 로직 구현

### 4. 배포 자동화
- **GitHub Actions 워크플로우**:
  - 자동 빌드 및 배포 설정
  - gh-pages 브랜치로 배포하는 구조 구현

## 주요 수정 사항 상세 분석

### 1. 프론트엔드 라우팅 수정
- **base 경로 설정**: vite.config.ts에 base: '/PalmReading/' 추가
- **리다이렉트 처리**: 404.html 및 index.html에 리다이렉트 스크립트 추가

### 2. 데이터 처리 방식 변경
- **로컬 데이터 저장소**: personality-data.ts 파일 생성
- **API 요청 대체**: queryClient.ts의 apiRequest 함수를 로컬 데이터 반환 방식으로 수정
- **로컬 스토리지 활용**: 테스트 결과 저장에 localStorage 사용

### 3. 자원 경로 수정
- **매니페스트 경로**: start_url, 아이콘 경로 등 수정
- **서비스 워커 경로**: 캐싱 대상 URL 경로 수정
- **AI 모델 경로**: 모델 로드 URL에 base 경로 추가

### 4. 배포 설정 추가
- **package.json**: 배포 스크립트(predeploy, deploy) 추가
- **GitHub Actions**: deploy.yml 워크플로우 파일 생성

## 개선 효과

1. **서버 의존성 제거**:
   - 정적 호스팅만으로 앱의 주요 기능 사용 가능
   - 백엔드 서버 없이도 PWA 기능 정상 작동

2. **사용자 경험 향상**:
   - 오프라인 지원 강화로 네트워크 연결 없이도 기본 기능 사용 가능
   - PWA 설치 기능으로 네이티브 앱과 유사한 경험 제공

3. **배포 및 유지보수 간소화**:
   - GitHub Actions를 통한 자동 배포로 유지보수 효율성 증가
   - 서버 관리 비용 제거로 운영 부담 감소

## 한계점 및 향후 개선 방향

1. **데이터 영속성 제한**:
   - localStorage는 용량 제한이 있어 대량 데이터 저장에 한계
   - 사용자 기기 변경 시 데이터 유실 가능성

2. **기능 제한**:
   - 서버 기반 고급 기능(사용자 인증, 데이터 동기화 등) 구현 불가
   - AI 모델 처리가 클라이언트에서 이루어져 성능 제약 가능성

3. **향후 개선 방향**:
   - Firebase 등의 서버리스 서비스 연동 검토
   - IndexedDB를 활용한 로컬 데이터 저장 확장
   - 웹 푸시 알림 등 추가 PWA 기능 구현 
# PalmReading 프로젝트 분석 - GitHub Pages 배포 설정

## GitHub Pages 배포 설정 분석

### 1. GitHub Pages 개요
GitHub Pages는 GitHub 저장소에서 직접 정적 웹사이트를 호스팅할 수 있는 서비스입니다. 주요 특징:
- 무료 호스팅 제공
- GitHub 저장소와 직접 연동
- 커스텀 도메인 지원
- HTTPS 자동 지원

PalmReading 프로젝트는 GitHub Pages를 활용하여 무료로 웹 애플리케이션을 배포하도록 설정되었습니다.

### 2. GitHub Actions 워크플로우 분석

GitHub Actions를 통한 CI/CD 파이프라인이 `.github/workflows/deploy.yml` 파일에 구성되었습니다:

```yaml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist/public
          branch: gh-pages
```

이 워크플로우는 다음과 같은 단계로 구성됩니다:
1. 코드 체크아웃
2. Node.js 환경 설정 (v18)
3. 의존성 설치 (npm ci 명령 사용)
4. 프로젝트 빌드 (npm run build)
5. GitHub Pages 배포 (JamesIves/github-pages-deploy-action 액션 사용)

특히 `JamesIves/github-pages-deploy-action` 액션은 빌드된 파일을 `gh-pages` 브랜치에 자동으로 푸시하여 GitHub Pages에 배포합니다.

### 3. 경로 설정 분석

GitHub Pages에서 프로젝트는 `https://younsanghoon.github.io/PalmReading/` 경로에 호스팅됩니다. 이를 위해 다음과 같은 경로 설정이 필요했습니다:

#### a. Vite 설정 (vite.config.ts)
```typescript
base: '/PalmReading/',
```
이 설정은 모든 정적 자원(JS, CSS, 이미지 등)의 기본 경로를 `/PalmReading/`으로 지정합니다.

#### b. Manifest 파일 (manifest.json)
```json
"start_url": "/PalmReading/",
"icons": [
  {
    "src": "/PalmReading/icon-192.png",
    // ...
  }
]
```
PWA 설정에서 시작 URL과 아이콘 경로를 GitHub Pages 경로에 맞게 수정했습니다.

#### c. 서비스 워커 (sw.js)
```javascript
const urlsToCache = [
  '/PalmReading/',
  '/PalmReading/index.html',
  // ...
];
```
캐싱할 리소스 경로를 GitHub Pages 경로에 맞게 수정했습니다.

#### d. SPA 라우팅 (index.html)
```javascript
// GitHub Pages에서 SPA 라우팅을 위한 리다이렉트 처리
(function(l) {
  if (l.search[1] === '/' ) {
    var decoded = l.search.slice(1).split('&').map(function(s) { 
      return s.replace(/~and~/g, '&')
    }).join('?');
    window.history.replaceState(null, null,
        l.pathname.slice(0, -1) + decoded + l.hash
    );
  }
}(window.location))
```
GitHub Pages는 SPA(Single Page Application)의 클라이언트 라우팅을 기본적으로 지원하지 않습니다. 이 스크립트는 404 페이지를 활용한 리다이렉트 트릭을 구현하여 SPA 라우팅을 가능하게 합니다.

### 4. PWA 오프라인 지원 분석

PWA(Progressive Web App) 기능을 GitHub Pages 환경에서 제대로 작동하도록 다음과 같은 개선이 이루어졌습니다:

#### a. 오프라인 페이지 (offline.html)
```html
<!DOCTYPE html>
<html lang="ko">
<head>
  <!-- ... -->
  <title>오프라인 - 성격 분석 테스트 센터</title>
  <style>
    /* 스타일 정의 */
  </style>
</head>
<body>
  <div class="container">
    <h1>인터넷 연결이 필요합니다</h1>
    <p>현재 오프라인 상태입니다. 인터넷에 연결한 후 다시 시도해주세요.</p>
    <a href="/PalmReading/" class="btn">새로고침</a>
  </div>
</body>
</html>
```
인터넷 연결이 없을 때 사용자에게 표시되는 오프라인 페이지입니다.

#### b. 서비스 워커 오프라인 처리
```javascript
return fetch(event.request)
  .catch(function() {
    // 오프라인이고 페이지 요청인 경우 오프라인 페이지 제공
    if (event.request.mode === 'navigate') {
      return caches.match('/PalmReading/offline.html');
    }
  });
```
네트워크 요청이 실패할 경우 오프라인 페이지를 제공하는 로직이 추가되었습니다.

### 5. 기술적 고려사항

#### a. 빌드 출력 디렉토리
```typescript
build: {
  outDir: path.resolve(import.meta.dirname, "dist/public"),
  emptyOutDir: true,
},
```
빌드 결과물이 `dist/public` 디렉토리에 생성되도록 설정되었으며, 이는 GitHub Actions 워크플로우에서 배포할 폴더로 지정된 경로와 일치합니다.

#### b. 환경 변수 및 API 경로
```typescript
server: {
  // ...
  proxy: {
    '/api': {
      target: 'http://localhost:3000',
      changeOrigin: true,
    },
  },
},
```
개발 환경에서는 API 요청을 로컬 서버로 프록시하도록 설정되어 있습니다. 그러나 GitHub Pages는 정적 호스팅만 지원하므로, 실제 배포 환경에서는 별도의 백엔드 서버가 필요할 수 있습니다.

### 6. 향후 개선 방향

#### a. 백엔드 API 통합
GitHub Pages는 정적 호스팅만 제공하므로, 백엔드 API가 필요한 경우 다음과 같은 방법을 고려해야 합니다:
- Serverless Functions (AWS Lambda, Vercel Functions 등) 활용
- 별도 백엔드 서버 호스팅 및 CORS 설정
- Firebase 같은 BaaS(Backend as a Service) 활용

#### b. 커스텀 도메인 설정
GitHub Pages에서 제공하는 기본 도메인(`younsanghoon.github.io/PalmReading`) 대신 커스텀 도메인을 사용할 경우, 다음 설정이 필요합니다:
- GitHub 저장소 설정에서 커스텀 도메인 설정
- DNS 제공업체에서 CNAME 레코드 설정
- 경로 설정 수정 (base URL을 '/' 또는 커스텀 도메인으로 변경)

#### c. SEO 최적화
SPA의 SEO 최적화를 위해 다음 방법을 고려할 수 있습니다:
- 메타 태그 최적화
- 사이트맵 생성 및 제출
- 소셜 미디어 메타 태그 추가 (Open Graph, Twitter Cards 등)

#### d. 성능 최적화
GitHub Pages 환경에서의 성능 최적화를 위한 방법:
- 코드 스플리팅 및 지연 로딩
- 이미지 최적화
- 캐싱 전략 개선 
# 프로젝트 분석: GitHub Pages 배포 및 프로젝트 구조

## 프로젝트 개요
이 프로젝트는 AI를 활용한 손금 분석 및 다양한 성격 테스트를 제공하는 웹 애플리케이션입니다. React, TypeScript, Tailwind CSS를 기반으로 개발되었으며, GitHub Pages를 통해 배포됩니다.

## 주요 기능
1. **손금 분석 테스트**: AI 모델을 활용하여 손금 이미지를 분석하고 운세 정보를 제공
2. **MBTI 테스트**: 16가지 성격 유형을 분석하는 테스트
3. **에니어그램 테스트**: 9가지 성격 유형을 분석하는 테스트
4. **동물상 테스트**: AI를 활용한 얼굴 이미지 분석으로 닮은 동물을 찾는 테스트

## 기술 스택
- **프론트엔드**: React, TypeScript, Tailwind CSS
- **상태 관리**: React Query
- **라우팅**: wouter (경량 라우팅 라이브러리)
- **UI 컴포넌트**: Radix UI 기반 커스텀 컴포넌트
- **AI 모델**: TensorFlow.js, Teachable Machine
- **빌드 도구**: Vite
- **배포**: GitHub Pages

## 프로젝트 구조
```
PalmReading/
  ├── client/                # 클라이언트 코드
  │   ├── index.html         # 메인 HTML 파일
  │   ├── public/            # 정적 파일 (이미지, 매니페스트 등)
  │   └── src/               # 소스 코드
  │       ├── components/    # UI 컴포넌트
  │       ├── hooks/         # 커스텀 훅
  │       ├── lib/           # 유틸리티 및 라이브러리
  │       ├── pages/         # 페이지 컴포넌트
  │       └── types/         # 타입 정의
  ├── server/                # 서버 코드 (현재 GitHub Pages 배포에서는 사용되지 않음)
  └── shared/                # 클라이언트와 서버 간 공유 코드
```

## GitHub Pages 배포 설정
1. **vite.config.ts**
   - `base: '/PalmReading/'` 설정이 이미 되어 있어 GitHub Pages 배포에 적합
   - 빌드 출력 디렉토리: `dist/public`

2. **package.json**
   - `gh-pages` 패키지가 개발 의존성으로 설치됨
   - 배포 스크립트:
     ```json
     "predeploy": "npm run build",
     "deploy": "gh-pages -d dist/public"
     ```

3. **GitHub Actions 워크플로우**
   - `.github/workflows/gh-pages.yml` 파일에서 자동 배포 설정
   - Node.js 20 환경에서 빌드 및 배포
   - peaceiris/actions-gh-pages@v3 액션을 사용하여 gh-pages 브랜치에 배포

## 라우팅 구성
1. **App.tsx**
   - wouter 라이브러리를 사용한 클라이언트 사이드 라우팅
   - GitHub Pages 배포를 위해 모든 경로에 `/PalmReading/` 접두사 추가 경로 설정
   - 예: `/PalmReading/palm-test`, `/PalmReading/mbti-test` 등

2. **404 페이지**
   - SPA에서 새로고침 시 404 오류를 방지하기 위한 리다이렉트 로직
   - 사용자 경험 향상을 위한 스타일링 적용

## AI 모델 통합
1. **Teachable Machine**
   - `@teachablemachine/image` 패키지를 사용하여 이미지 분석
   - `use-teachable-machine.ts` 훅을 통해 모델 로딩 및 예측 기능 제공

2. **TensorFlow.js**
   - 브라우저에서 AI 모델을 실행하기 위한 기반 라이브러리
   - 버전 1.3.1 사용 (Teachable Machine 호환성)

## 다국어 지원
- `i18n.ts`를 통한 다국어 지원 구현
- 언어 선택기 컴포넌트를 통해 사용자가 언어 변경 가능

## PWA 지원
- `manifest.json` 및 서비스 워커 구성으로 PWA(Progressive Web App) 기능 지원
- 오프라인 페이지 제공

## 개선 사항 및 고려 사항
1. **서버 기능**
   - 현재 GitHub Pages는 정적 호스팅만 지원하므로 서버 기능은 비활성화됨
   - 필요시 별도의 백엔드 서비스(Firebase, Vercel 등) 연동 고려

2. **라우팅 최적화**
   - GitHub Pages에서 SPA 라우팅 처리를 위한 404 페이지 리다이렉트 방식 사용
   - 해시 라우팅으로 전환하는 것도 고려 가능

3. **성능 최적화**
   - AI 모델 로딩 시간 개선을 위한 최적화 필요
   - 이미지 최적화 및 지연 로딩 적용 고려

4. **보안**
   - 클라이언트 사이드 AI 모델 사용 시 모델 가중치 보호 방안 고려
   - 사용자 데이터 처리에 관한 명확한 정책 수립 
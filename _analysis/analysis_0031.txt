# 프로젝트 분석: GitHub Pages 배포 방식 변경 및 문제 해결

## 문제 분석

### 1. 지속적인 404 오류 문제
- GitHub Pages 사용자 사이트(`younsanghoon.github.io`)에 접속 시 다른 프로젝트("성격 분석 테스트")가 표시됨
- 프로젝트 사이트(`younsanghoon.github.io/PalmReading/`)에 접속 시 404 오류 발생
- 이전에 시도한 SPA 라우팅 수정 및 404.html 리다이렉트 방식이 효과가 없음
- GitHub Actions 워크플로우를 통한 자동 배포 방식에 문제가 있을 가능성

### 2. GitHub Pages 배포 방식 분석
- GitHub Pages는 두 가지 주요 배포 방식을 지원:
  1. GitHub Actions 워크플로우를 통한 자동 배포
  2. 특정 브랜치(gh-pages 또는 main)를 직접 사용한 배포
- 현재 프로젝트는 GitHub Actions를 사용하고 있었으나 문제가 발생
- 직접 gh-pages 브랜치를 생성하여 배포하는 방식으로 전환 필요

### 3. 빌드 과정 분석
- Vite 빌드 시 replit-cartographer 관련 오류가 발생하지만 빌드 자체는 성공
- 빌드 결과물은 dist/public 디렉토리에 생성됨
- 정적 파일들(HTML, CSS, JS, 이미지 등)이 올바르게 생성됨

## 해결 방법

### 1. gh-pages 브랜치 생성 및 설정
```bash
# 새 브랜치 생성
git checkout -b gh-pages

# 프로젝트 빌드
npm run build

# 빌드 결과물을 루트 디렉토리로 복사
xcopy dist\public\* . /E /Y

# GitHub Pages 설정 파일 생성
# CNAME 파일 생성
# .nojekyll 파일 생성
```

### 2. GitHub Pages 설정 파일
- **CNAME 파일**: 사용자 정의 도메인 설정 또는 GitHub Pages 경로 지정
  ```
  younsanghoon.github.io/PalmReading
  ```

- **.nojekyll 파일**: GitHub Pages에서 Jekyll 처리를 비활성화
  - 언더스코어(_)로 시작하는 파일/디렉토리 무시 방지
  - 정적 자산 처리 방식 개선

### 3. 배포 과정
1. 빌드된 파일들을 gh-pages 브랜치에 커밋
2. gh-pages 브랜치를 GitHub에 푸시
3. GitHub 저장소 설정에서 Pages 소스를 gh-pages 브랜치로 변경
4. GitHub Pages 배포 프로세스가 자동으로 시작됨

## 기술적 고려사항

### 1. GitHub Actions vs 직접 브랜치 배포
- **GitHub Actions**:
  - CI/CD 파이프라인 자동화
  - 테스트, 빌드, 배포 통합
  - 복잡한 워크플로우 지원
  - 설정 오류 가능성 높음

- **직접 브랜치 배포**:
  - 간단하고 직관적인 방식
  - 빌드 결과물을 직접 제어
  - 수동 작업 필요
  - 디버깅이 용이함

### 2. SPA 배포 시 고려사항
- 클라이언트 사이드 라우팅을 사용하는 SPA는 서버 설정이 중요
- GitHub Pages는 서버 측 리다이렉션을 지원하지 않음
- 404.html 트릭을 사용하거나 직접 라우팅 처리 필요
- base URL 설정이 올바르게 되어 있어야 함

### 3. 빌드 설정 최적화
- Vite의 base URL 설정: `/PalmReading/`
- 정적 자산 경로가 올바르게 설정되어야 함
- 환경별 설정 분리 고려

## 향후 권장사항

### 1. 배포 자동화 개선
```bash
# 배포 스크립트 예시 (deploy.sh)
#!/bin/bash
npm run build
git checkout gh-pages
rm -rf assets attached_assets camera-capture.* *.html *.json *.js *.png *.svg
cp -r dist/public/* .
git add .
git commit -m "Update GitHub Pages"
git push origin gh-pages
git checkout main
```

### 2. GitHub Actions 워크플로우 수정
- 기존 GitHub Actions 워크플로우를 수정하여 gh-pages 브랜치에 직접 배포하는 방식으로 변경 가능
```yaml
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npm run build
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist/public
```

### 3. 테스트 및 모니터링
- 배포 후 모든 페이지와 기능을 철저히 테스트
- 특히 SPA 라우팅과 새로고침 시나리오 확인
- 모바일 기기 및 다양한 브라우저에서 테스트 
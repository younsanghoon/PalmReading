# 계획: GitHub Pages 배포 최적화 및 Google Play 스토어 등록 준비

## 1. GitHub Pages 배포 최적화
### 1.1 워크플로우 통합 및 수정
- 두 개의 워크플로우 파일 중 하나만 선택하여 사용
  - `static.yml` 선택 (GitHub 공식 Pages 액션 사용)
  - `deploy.yml` 삭제 또는 비활성화
- 빌드 출력 디렉토리 일관성 확보
  - `vite.config.ts`의 `outDir`과 워크플로우 파일의 `path` 일치시키기

### 1.2 경로 설정 문제 해결
- `client/index.html` 리소스 경로 수정
  - `/manifest.json` → `/PalmReading/manifest.json`
  - `/icon-192.png` → `/PalmReading/icon-192.png`
- 서비스 워커 등록 경로 수정
  - `/sw.js` → `/PalmReading/sw.js`
- 기타 절대 경로를 GitHub Pages 기본 경로에 맞게 수정

### 1.3 배포 테스트 및 검증
- 메인 페이지 로드 확인
- 라우팅 기능 테스트
- 리소스 로드 확인 (이미지, 스크립트 등)
- PWA 기능 테스트 (오프라인 모드, 설치 기능)

## 2. PWA 최적화
### 2.1 오프라인 지원 강화
- 서비스 워커 캐시 전략 개선
- 오프라인 경험 향상
- 핵심 기능의 오프라인 지원

### 2.2 설치 경험 개선
- 설치 배너 커스터마이징
- 앱 아이콘 및 스플래시 스크린 최적화
- iOS 지원 개선

## 3. 성능 최적화
### 3.1 코드 최적화
- 코드 분할 및 지연 로딩 적용
- 번들 크기 최적화
- 불필요한 코드 제거

### 3.2 리소스 최적화
- 이미지 최적화 (WebP 포맷, 적절한 크기)
- 폰트 최적화
- 텍스트 압축 적용

## 4. SEO 최적화
### 4.1 메타 태그 최적화
- 기본 메타 태그 추가 및 개선
- 소셜 미디어 메타 태그 추가
- 구조화된 데이터 추가

### 4.2 검색 엔진 도구 연동
- 사이트맵 생성 및 제출
- robots.txt 파일 생성
- Google Search Console 등록

## 5. Google Play 스토어 등록 준비
### 5.1 TWA(Trusted Web Activity) 설정
- Bubblewrap 또는 PWA Builder 도구 활용
- 디지털 자산 링크 설정
- 앱 서명 키 생성

### 5.2 스토어 등록 자료 준비
- 앱 아이콘 및 스크린샷 준비
- 앱 설명 및 개인정보처리방침 작성
- 콘텐츠 등급 평가 준비

### 5.3 앱 빌드 및 테스트
- TWA 앱 빌드
- 로컬 테스트
- 출시 전 최종 검증

## 6. 최종 목표
1. 최적화된 GitHub Pages 배포 완료
   - 빠른 로딩 속도
   - 안정적인 PWA 기능
   - 검색 엔진 최적화

2. Google Play 스토어 등록 완료
   - TWA 기반 앱 등록
   - 사용자 친화적인 스토어 페이지
   - 원활한 설치 및 사용 경험 
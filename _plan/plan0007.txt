# AI 모델 관리 및 로딩 시스템 개선 계획

## 현재 상황
- AI 모델 파일들이 여러 위치에 중복 저장되어 있음
  - 프로젝트 루트의 `attached_assets` 디렉토리
  - `client/public/attached_assets` 디렉토리
  - `client/public` 디렉토리
- 모델 URL 경로가 코드 여러 곳에 하드코딩되어 있음
- 모델 로딩 오류 처리가 불완전함

## 개선 목표
1. 모델 파일 구조 정리 및 중앙화
2. 모델 URL 경로 관리 개선
3. 모델 로딩 오류 처리 강화
4. 모델 캐싱 및 성능 최적화

## 세부 계획

### 1. 모델 파일 구조 정리 (우선순위: 높음)
- [ ] `client/public/models` 디렉토리 생성
- [ ] 모델 유형별 서브디렉토리 생성
  - [ ] `models/animal` - 동물상 관련 모델
  - [ ] `models/palm` - 손금 관련 모델
- [ ] 기존 모델 파일 이동 및 명확한 이름으로 변경
  - [ ] `animal-model.json` 대신 `animal-face-model.json`과 같이 명확한 이름 사용
- [ ] 불필요한 중복 파일 제거

### 2. 모델 URL 경로 관리 개선 (우선순위: 중간)
- [ ] `client/src/lib/model-paths.ts` 파일 생성하여 모든 모델 경로를 상수로 관리
```typescript
// 예시 코드
export const MODEL_PATHS = {
  ANIMAL_FACE: {
    MODEL: '/models/animal/animal-face-model.json',
    METADATA: '/models/animal/animal-face-metadata.json',
    WEIGHTS: '/models/animal/animal-face-weights.bin'
  },
  PALM_READING: {
    MODEL: '/models/palm/palm-reading-model.json',
    METADATA: '/models/palm/palm-reading-metadata.json',
    WEIGHTS: '/models/palm/palm-reading-weights.bin'
  }
};
```
- [ ] 모든 코드에서 하드코딩된 경로를 상수로 대체

### 3. 모델 로딩 오류 처리 강화 (우선순위: 높음)
- [ ] `useTeachableMachine` 훅에 더 상세한 오류 메시지 추가
- [ ] 모델 로딩 실패 시 사용자에게 친화적인 오류 메시지 표시
- [ ] 네트워크 문제, 파일 누락, 모델 호환성 등 다양한 오류 상황 처리
- [ ] 자동 재시도 메커니즘 구현

### 4. 모델 캐싱 및 성능 최적화 (우선순위: 중간)
- [ ] 브라우저 캐싱 활용을 위한 적절한 헤더 설정
- [ ] 모델 파일 압축 및 최적화
- [ ] 모델 사전 로드 시스템 개선
- [ ] 로딩 상태 UI 개선으로 사용자 경험 향상

## 구현 순서
1. 모델 파일 구조 정리
2. 모델 URL 경로 관리 개선
3. 모델 로딩 오류 처리 강화
4. 모델 캐싱 및 성능 최적화

## 테스트 계획
- 각 모델 로딩 시나리오에 대한 단위 테스트 작성
- 다양한 네트워크 상황(느린 연결, 끊김 등)에서의 테스트
- 다양한 브라우저 및 디바이스에서의 호환성 테스트

## 기대 효과
- 모델 로딩 오류 감소로 사용자 경험 개선
- 코드 유지보수성 향상
- 모델 관리 효율성 증대
- 애플리케이션 성능 및 안정성 향상 